
UART BASED CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  000002c8  0000033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000ac0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000075a  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001ef  00000000  00000000  0000129a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000414  00000000  00000000  00001489  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000160  00000000  00000000  00001978  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018a  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 39       	cpi	r26, 0x90	; 144
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <main>
  8a:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <uart_send>:
		UCSRC|=(1<<URSEL)|(1<UCSZ0)|(1<<UCSZ1);  // select character size or UCSZ0,UCSZ1 &UCSZ2 decide for character size
		UCSRB|=(1<<TXEN)|(1<<RXEN);   // enable transmission
}
void uart_send(unsigned char rec)
{
	while(!(UCSRA&(1<<UDRE)));   //wait for transmission complete
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <uart_send>
	UDR=rec;	
  96:	8c b9       	out	0x0c, r24	; 12
}
  98:	08 95       	ret

0000009a <lcd_cmd>:
	
}
void lcd_cmd(unsigned char cmd)
{
	
	PORTC=(cmd)&(0xf0);      // select 8 bit mode lcd select
  9a:	98 2f       	mov	r25, r24
  9c:	90 7f       	andi	r25, 0xF0	; 240
  9e:	95 bb       	out	0x15, r25	; 21
	PORTC &= ~((1<<RS)|(1<<RW)) ; //RS=0 & RW=0 for for select cmd register
  a0:	95 b3       	in	r25, 0x15	; 21
  a2:	9c 7f       	andi	r25, 0xFC	; 252
  a4:	95 bb       	out	0x15, r25	; 21
	
	PORTC|=(1<<EN) ;   // EN=1
  a6:	aa 9a       	sbi	0x15, 2	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	ef e0       	ldi	r30, 0x0F	; 15
  aa:	f7 e2       	ldi	r31, 0x27	; 39
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_cmd+0x12>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_cmd+0x18>
  b2:	00 00       	nop
	DL5;
	PORTC&=~(1<<EN);     //EN =0
  b4:	aa 98       	cbi	0x15, 2	; 21
  b6:	ef e0       	ldi	r30, 0x0F	; 15
  b8:	f7 e2       	ldi	r31, 0x27	; 39
  ba:	31 97       	sbiw	r30, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_cmd+0x20>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_cmd+0x26>
  c0:	00 00       	nop
	DL5;
	
	PORTC=(cmd<<4)&(0xf0);      // select 8 bit mode lcd select
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	82 95       	swap	r24
  c6:	92 95       	swap	r25
  c8:	90 7f       	andi	r25, 0xF0	; 240
  ca:	98 27       	eor	r25, r24
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	98 27       	eor	r25, r24
  d0:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~((1<<RS)|(1<<RW)) ; //RS=0 & RW=0 for for select cmd register
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8c 7f       	andi	r24, 0xFC	; 252
  d6:	85 bb       	out	0x15, r24	; 21
	
	PORTC|=(1<<EN) ;   // EN=1
  d8:	aa 9a       	sbi	0x15, 2	; 21
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	97 e2       	ldi	r25, 0x27	; 39
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_cmd+0x44>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_cmd+0x4a>
  e4:	00 00       	nop
	DL5;
	PORTC&=~(1<<EN);     //EN =0
  e6:	aa 98       	cbi	0x15, 2	; 21
  e8:	ef e0       	ldi	r30, 0x0F	; 15
  ea:	f7 e2       	ldi	r31, 0x27	; 39
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_cmd+0x52>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_cmd+0x58>
  f2:	00 00       	nop
	DL5;

}
  f4:	08 95       	ret

000000f6 <lcd_init>:
#define RW PC1
#define EN PC2
#define DL5 _delay_ms(5)

void lcd_init()
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	lcd_cmd(0x02);  //
  fa:	cd e4       	ldi	r28, 0x4D	; 77
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fe 01       	movw	r30, r28
 104:	09 95       	icall
	lcd_cmd(0x28);
 106:	88 e2       	ldi	r24, 0x28	; 40
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	fe 01       	movw	r30, r28
 10c:	09 95       	icall
	lcd_cmd(0x0e);
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	fe 01       	movw	r30, r28
 114:	09 95       	icall
	
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_data>:
	DL5;

}
void lcd_data(unsigned char data)
{
	PORTC=(data)&(0xf0);
 11c:	98 2f       	mov	r25, r24
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	95 bb       	out	0x15, r25	; 21
	PORTC |= (1<<RS) ; //RS=1 for select cmd register
 122:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1<<RW);  //RW=0 for select write data
 124:	a9 98       	cbi	0x15, 1	; 21
	PORTC |=(1<<EN);   // EN=1
 126:	aa 9a       	sbi	0x15, 2	; 21
 128:	ef e0       	ldi	r30, 0x0F	; 15
 12a:	f7 e2       	ldi	r31, 0x27	; 39
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <lcd_data+0x10>
 130:	00 c0       	rjmp	.+0      	; 0x132 <lcd_data+0x16>
 132:	00 00       	nop
	DL5;
	PORTC&=~(1<<EN);     //EN =0
 134:	aa 98       	cbi	0x15, 2	; 21
 136:	ef e0       	ldi	r30, 0x0F	; 15
 138:	f7 e2       	ldi	r31, 0x27	; 39
 13a:	31 97       	sbiw	r30, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_data+0x1e>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_data+0x24>
 140:	00 00       	nop
	DL5;
	
	PORTC=(data<<4)&(0xf0);
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	82 95       	swap	r24
 146:	92 95       	swap	r25
 148:	90 7f       	andi	r25, 0xF0	; 240
 14a:	98 27       	eor	r25, r24
 14c:	80 7f       	andi	r24, 0xF0	; 240
 14e:	98 27       	eor	r25, r24
 150:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<RS) ; //RS=1 for select cmd register
 152:	a8 9a       	sbi	0x15, 0	; 21
	PORTC &= ~(1<<RW);  //RW=0 for select write data
 154:	a9 98       	cbi	0x15, 1	; 21
	PORTC |=(1<<EN);   // EN=1
 156:	aa 9a       	sbi	0x15, 2	; 21
 158:	8f e0       	ldi	r24, 0x0F	; 15
 15a:	97 e2       	ldi	r25, 0x27	; 39
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <lcd_data+0x40>
 160:	00 c0       	rjmp	.+0      	; 0x162 <lcd_data+0x46>
 162:	00 00       	nop
	DL5;
	PORTC&=~(1<<EN);     //EN =0
 164:	aa 98       	cbi	0x15, 2	; 21
 166:	ef e0       	ldi	r30, 0x0F	; 15
 168:	f7 e2       	ldi	r31, 0x27	; 39
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_data+0x4e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_data+0x54>
 170:	00 00       	nop
	DL5;
}
 172:	08 95       	ret

00000174 <lcd_string>:

void lcd_string(unsigned char *x)
{
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	ec 01       	movw	r28, r24
	while(*x!='\0')
 17a:	88 81       	ld	r24, Y
 17c:	88 23       	and	r24, r24
 17e:	31 f0       	breq	.+12     	; 0x18c <lcd_string+0x18>
	DL5;
	PORTC&=~(1<<EN);     //EN =0
	DL5;
}

void lcd_string(unsigned char *x)
 180:	21 96       	adiw	r28, 0x01	; 1
{
	while(*x!='\0')
	{
		lcd_data(*x);
 182:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_data>
	DL5;
}

void lcd_string(unsigned char *x)
{
	while(*x!='\0')
 186:	89 91       	ld	r24, Y+
 188:	88 23       	and	r24, r24
 18a:	d9 f7       	brne	.-10     	; 0x182 <lcd_string+0xe>
	{
		lcd_data(*x);
		x++;
	}
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <uart_string>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd4bit.h"

void uart_string(unsigned char* str)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!='\0')
 198:	88 81       	ld	r24, Y
 19a:	88 23       	and	r24, r24
 19c:	39 f0       	breq	.+14     	; 0x1ac <uart_string+0x1a>
#define  F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include "lcd4bit.h"

void uart_string(unsigned char* str)
 19e:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!='\0')
	{
		uart_send(str[i]);
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <uart_send>
#include "lcd4bit.h"

void uart_string(unsigned char* str)
{
	int i;
	while(str[i]!='\0')
 1a6:	89 91       	ld	r24, Y+
 1a8:	88 23       	and	r24, r24
 1aa:	d1 f7       	brne	.-12     	; 0x1a0 <uart_string+0xe>
	{
		uart_send(str[i]);
		i++;
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <uart_init>:

void uart_init()
{
		UBRRL=51;    // set speed
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	89 b9       	out	0x09, r24	; 9
		UCSRC|=(1<<URSEL)|(1<UCSZ0)|(1<<UCSZ1);  // select character size or UCSZ0,UCSZ1 &UCSZ2 decide for character size
 1b6:	80 b5       	in	r24, 0x20	; 32
 1b8:	84 68       	ori	r24, 0x84	; 132
 1ba:	80 bd       	out	0x20, r24	; 32
		UCSRB|=(1<<TXEN)|(1<<RXEN);   // enable transmission
 1bc:	8a b1       	in	r24, 0x0a	; 10
 1be:	88 61       	ori	r24, 0x18	; 24
 1c0:	8a b9       	out	0x0a, r24	; 10
}
 1c2:	08 95       	ret

000001c4 <uart_rec>:
	while(!(UCSRA&(1<<UDRE)));   //wait for transmission complete
	UDR=rec;	
}
unsigned char uart_rec()
{  
	while(!(UCSRA&(1<<RXC)));  //wait for receive data complete
 1c4:	5f 9b       	sbis	0x0b, 7	; 11
 1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <uart_rec>
	return UDR;                 //receive data form UDR
 1c8:	8c b1       	in	r24, 0x0c	; 12
}
 1ca:	08 95       	ret

000001cc <uart_tx>:
void uart_tx()
{
	UDR='G';
 1cc:	87 e4       	ldi	r24, 0x47	; 71
 1ce:	8c b9       	out	0x0c, r24	; 12
}
 1d0:	08 95       	ret

000001d2 <main>:


void main(void)
{ 
	
	DDRA=0xff;    //for output
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	8a bb       	out	0x1a, r24	; 26
	PORTC=0x00;
 1d6:	15 ba       	out	0x15, r1	; 21
	DDRC=0xff;
 1d8:	84 bb       	out	0x14, r24	; 20
	
	uart_init();
 1da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <uart_init>
	lcd_init();
 1de:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_init>
	lcd_string(" **WELCOME** ");
 1e2:	80 e6       	ldi	r24, 0x60	; 96
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 1ea:	8f ef       	ldi	r24, 0xFF	; 255
 1ec:	93 ed       	ldi	r25, 0xD3	; 211
 1ee:	a0 e3       	ldi	r26, 0x30	; 48
 1f0:	81 50       	subi	r24, 0x01	; 1
 1f2:	90 40       	sbci	r25, 0x00	; 0
 1f4:	a0 40       	sbci	r26, 0x00	; 0
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x1e>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0x28>
 1fa:	00 00       	nop
	_delay_ms(2000);
	lcd_cmd(0x01);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
	{
		char a;
		a=uart_rec();
		if (a=='B')   // press B key for BACKWARD movement of motor in direction
		{
			PORTA=0x05;
 202:	15 e0       	ldi	r17, 0x05	; 5
				_delay_ms(50);
				lcd_cmd(0x01);
			lcd_string("BACKWARD");
 204:	0f 2e       	mov	r0, r31
 206:	fe e6       	ldi	r31, 0x6E	; 110
 208:	ef 2e       	mov	r14, r31
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	ff 2e       	mov	r15, r31
 20e:	f0 2d       	mov	r31, r0
		}
		else if (a=='S')  // press S key for Stop motor 
		{
			PORTA=0x00;												
			lcd_cmd(0x01);
			lcd_string("STOP");
 210:	ca e8       	ldi	r28, 0x8A	; 138
 212:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_cmd(0x01);
			lcd_string("RIGHT");
		}
		else if (a=='L')  // press L key for movement of motor in LEFT direction
		{
			PORTA=0x06;					
 214:	0f 2e       	mov	r0, r31
 216:	f6 e0       	ldi	r31, 0x06	; 6
 218:	af 2e       	mov	r10, r31
 21a:	f0 2d       	mov	r31, r0
			lcd_cmd(0x01);
			lcd_string("LEFT");
 21c:	0f 2e       	mov	r0, r31
 21e:	f5 e8       	ldi	r31, 0x85	; 133
 220:	6f 2e       	mov	r6, r31
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	7f 2e       	mov	r7, r31
 226:	f0 2d       	mov	r31, r0
			lcd_cmd(0x01);
			lcd_string("FORWARD");
		}
		else if (a=='R')  // press R key for movement of motor in RIGHT direction
		{
			PORTA=0x09;
 228:	0f 2e       	mov	r0, r31
 22a:	f9 e0       	ldi	r31, 0x09	; 9
 22c:	bf 2e       	mov	r11, r31
 22e:	f0 2d       	mov	r31, r0
					
			lcd_cmd(0x01);
			lcd_string("RIGHT");
 230:	0f 2e       	mov	r0, r31
 232:	ff e7       	ldi	r31, 0x7F	; 127
 234:	8f 2e       	mov	r8, r31
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	9f 2e       	mov	r9, r31
 23a:	f0 2d       	mov	r31, r0
				lcd_cmd(0x01);
			lcd_string("BACKWARD");
		}
		else if (a=='F')  // press F key for movement of motor in FORWARD direction
		{
			PORTA=0x0A;
 23c:	0a e0       	ldi	r16, 0x0A	; 10
			
			lcd_cmd(0x01);
			lcd_string("FORWARD");
 23e:	0f 2e       	mov	r0, r31
 240:	f7 e7       	ldi	r31, 0x77	; 119
 242:	cf 2e       	mov	r12, r31
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	df 2e       	mov	r13, r31
 248:	f0 2d       	mov	r31, r0
	_delay_ms(2000);
	lcd_cmd(0x01);
	while(1)
	{
		char a;
		a=uart_rec();
 24a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <uart_rec>
		if (a=='B')   // press B key for BACKWARD movement of motor in direction
 24e:	82 34       	cpi	r24, 0x42	; 66
 250:	89 f4       	brne	.+34     	; 0x274 <main+0xa2>
		{
			PORTA=0x05;
 252:	1b bb       	out	0x1b, r17	; 27
 254:	8f e7       	ldi	r24, 0x7F	; 127
 256:	98 e3       	ldi	r25, 0x38	; 56
 258:	a1 e0       	ldi	r26, 0x01	; 1
 25a:	81 50       	subi	r24, 0x01	; 1
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	a0 40       	sbci	r26, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <main+0x88>
 262:	00 c0       	rjmp	.+0      	; 0x264 <main+0x92>
 264:	00 00       	nop
				_delay_ms(50);
				lcd_cmd(0x01);
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
			lcd_string("BACKWARD");
 26c:	c7 01       	movw	r24, r14
 26e:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 272:	eb cf       	rjmp	.-42     	; 0x24a <main+0x78>
		}
		else if (a=='F')  // press F key for movement of motor in FORWARD direction
 274:	86 34       	cpi	r24, 0x46	; 70
 276:	41 f4       	brne	.+16     	; 0x288 <main+0xb6>
		{
			PORTA=0x0A;
 278:	0b bb       	out	0x1b, r16	; 27
			
			lcd_cmd(0x01);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
			lcd_string("FORWARD");
 280:	c6 01       	movw	r24, r12
 282:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 286:	e1 cf       	rjmp	.-62     	; 0x24a <main+0x78>
		}
		else if (a=='R')  // press R key for movement of motor in RIGHT direction
 288:	82 35       	cpi	r24, 0x52	; 82
 28a:	41 f4       	brne	.+16     	; 0x29c <main+0xca>
		{
			PORTA=0x09;
 28c:	bb ba       	out	0x1b, r11	; 27
					
			lcd_cmd(0x01);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
			lcd_string("RIGHT");
 294:	c4 01       	movw	r24, r8
 296:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 29a:	d7 cf       	rjmp	.-82     	; 0x24a <main+0x78>
		}
		else if (a=='L')  // press L key for movement of motor in LEFT direction
 29c:	8c 34       	cpi	r24, 0x4C	; 76
 29e:	41 f4       	brne	.+16     	; 0x2b0 <main+0xde>
		{
			PORTA=0x06;					
 2a0:	ab ba       	out	0x1b, r10	; 27
			lcd_cmd(0x01);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
			lcd_string("LEFT");
 2a8:	c3 01       	movw	r24, r6
 2aa:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 2ae:	cd cf       	rjmp	.-102    	; 0x24a <main+0x78>
		}
		else if (a=='S')  // press S key for Stop motor 
 2b0:	83 35       	cpi	r24, 0x53	; 83
 2b2:	59 f6       	brne	.-106    	; 0x24a <main+0x78>
		{
			PORTA=0x00;												
 2b4:	1b ba       	out	0x1b, r1	; 27
			lcd_cmd(0x01);
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 4d 00 	call	0x9a	; 0x9a <lcd_cmd>
			lcd_string("STOP");
 2bc:	ce 01       	movw	r24, r28
 2be:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_string>
 2c2:	c3 cf       	rjmp	.-122    	; 0x24a <main+0x78>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
